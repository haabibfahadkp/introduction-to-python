{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO/ErHXIjLfzlBtZEpjRWjh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/haabibfahadkp/introduction-to-python/blob/main/basics2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fsdmG2G4fbmD",
        "outputId": "9ee08610-3a28-4112-ad8e-422fcc59a9fd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " enter your name fahad\n",
            " enter the number9946969747\n"
          ]
        }
      ],
      "source": [
        "name=input(\" enter your name \")\n",
        "ph=int(input(\" enter the number \"))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n1=int(input(\" enter the number \"))\n",
        "n2=int(input(\" enter the number \"))\n",
        "if n1>n2:\n",
        "  print(\"first number is largest\")\n",
        "else:\n",
        "  print(\"second number is largest\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fERtyBs-hESN",
        "outputId": "4b75cb1b-c1bd-4c4e-9be3-6bffc69bafdd"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " enter the number 45\n",
            " enter the number 50\n",
            "second number is largest\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n1=int(input(\" enter the number \"))\n",
        "n2=int(input(\" enter the number \"))\n",
        "n3=int(input(\" enter the number \"))\n",
        "if n1>n2 and n1>n3:\n",
        "  print(\"first number is largest\")\n",
        "if n2>n1 and n2>n3:\n",
        "  print(\"second number is largest\")\n",
        "else:\n",
        "  print(\"third number is largest\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jV5-zFyspJE5",
        "outputId": "96b752a1-79e9-43ca-ef3c-b3a1d1689305"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " enter the number 23\n",
            " enter the number 34\n",
            " enter the number 32\n",
            "second number is largest\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=int(input(\" enter the number \"))\n",
        "if x%2==0:\n",
        "  print(\"the number is even\")\n",
        "else:\n",
        "  print(\"number is odd\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2YrXp1cOrfGZ",
        "outputId": "d5824e55-d82b-4a90-f9cc-f3d02f0b7e08"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " enter the number 11\n",
            "number is odd\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(1,11):\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SKjosFCDvL9b",
        "outputId": "e578aa16-0bf1-4c80-a79a-1f369efcff1e"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mDeDOB0OzfyW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xx2vg5BR0G0z"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}